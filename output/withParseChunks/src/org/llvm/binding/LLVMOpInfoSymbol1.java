package org.llvm.binding;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * The initial support in LLVM MC for the most general form of a relocatable<br>
 * expression is "AddSymbol - SubtractSymbol + Offset".  For some Darwin targets<br>
 * this full form is encoded in the relocation information so that AddSymbol and<br>
 * SubtractSymbol can be link edited independent of each other.  Many other<br>
 * platforms only allow a relocatable expression of the form AddSymbol + Offset<br>
 * to be encoded.<br>
 * <br>
 * The LLVMOpInfoCallback() for the TagType value of 1 uses the struct<br>
 * LLVMOpInfo1.  The value of the relocatable expression for the operand,<br>
 * including any PC adjustment, is passed in to the call back in the Value<br>
 * field.  The symbolic information about the operand is returned using all<br>
 * the fields of the structure with the Offset of the relocatable expression<br>
 * returned in the Value field.  It is possible that some symbols in the<br>
 * relocatable expression were assembly temporary symbols, for example<br>
 * "Ldata - LpicBase + constant", and only the Values of the symbols without<br>
 * symbol names are present in the relocation information.  The VariantKind<br>
 * type is one of the Target specific #defines below and is used to print<br>
 * operands like "_foo@GOT", ":lower16:_foo", etc.<br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("LLVM") 
public class LLVMOpInfoSymbol1 extends StructObject {
	public LLVMOpInfoSymbol1() {
		super();
	}
	/// 1 if this symbol is present
	@Field(0) 
	public long Present() {
		return this.io.getLongField(this, 0);
	}
	/// 1 if this symbol is present
	@Field(0) 
	public LLVMOpInfoSymbol1 Present(long Present) {
		this.io.setLongField(this, 0, Present);
		return this;
	}
	/**
	 * symbol name if not NULL<br>
	 * C type : const char*
	 */
	@Field(1) 
	public Pointer<Byte > Name() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * symbol name if not NULL<br>
	 * C type : const char*
	 */
	@Field(1) 
	public LLVMOpInfoSymbol1 Name(Pointer<Byte > Name) {
		this.io.setPointerField(this, 1, Name);
		return this;
	}
	/// symbol value if name is NULL
	@Field(2) 
	public long Value() {
		return this.io.getLongField(this, 2);
	}
	/// symbol value if name is NULL
	@Field(2) 
	public LLVMOpInfoSymbol1 Value(long Value) {
		this.io.setLongField(this, 2, Value);
		return this;
	}
	public LLVMOpInfoSymbol1(Pointer pointer) {
		super(pointer);
	}
}
